apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'

android {
    def globalConfig = rootProject.extensions.getByName("ext")
    // Create a variable called keystorePropertiesFile, and initialize it to your
    // keystore.properties file, in the rootProject folder.
    def keystorePropertiesFile = rootProject.file("keystore.properties")
    // Initialize a new Properties() object called keystoreProperties.
    def keystoreProperties = new Properties()
    // Load your keystore.properties file into the keystoreProperties object.
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

    compileSdkVersion globalConfig["compileSdkVersion"]
    buildToolsVersion globalConfig["buildToolsVersion"]

    defaultConfig {
        applicationId globalConfig["applicationId"]
        minSdkVersion globalConfig["minSdkVersion"]
        targetSdkVersion globalConfig["targetSdkVersion"]
        versionCode globalConfig["versionCode"]
        versionName globalConfig["versionName"]
        testInstrumentationRunner globalConfig["testInstrumentationRunner"]

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [ moduleName : project.getName() ]
            }
        }
    }

    signingConfigs {
        debug {
            storeFile file(keystoreProperties['debugStoreFile'])
            storePassword keystoreProperties['debugStorePassword']
            keyAlias keystoreProperties['debugKeyAlias']
            keyPassword keystoreProperties['debugKeyPassword']
        }
        release {
            storeFile file(keystoreProperties['debugStoreFile'])
            storePassword keystoreProperties['debugStorePassword']
            keyAlias keystoreProperties['debugKeyAlias']
            keyPassword keystoreProperties['debugKeyPassword']
            v2SigningEnabled true
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        official {}
    }

    //rename apk
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def oldFile = output.outputFile
            if (oldFile != null && oldFile.name.endsWith('.apk')) {
                def appName = 'app'
                def releaseApkName
                // 输出apk名称为app_debug_official_1.0.0.apk
                releaseApkName = "${appName}_${variant.buildType.name}_${variant.productFlavors[0].name}_${defaultConfig.versionName}.apk"
                output.outputFile = new File(oldFile.parent, releaseApkName)
            }


        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
    }

    lintOptions {
        quiet true
        abortOnError true
        ignoreWarnings true
    }
//
//    compileOptions {
//        sourceCompatibility globalConfig["javaVersion"]
//        targetCompatibility globalConfig["javaVersion"]
//    }
}


greendao {
    def greendaoConfig = rootProject.ext.greendaoConfig
    schemaVersion greendaoConfig.schemaVersion
    daoPackage greendaoConfig.daoPackageApp
    targetGenDir greendaoConfig.targetGenDir
}

dependencies {
    def dependencies = rootProject.ext.dependencies
    def testDependencies = rootProject.ext.testDependencies

    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile(testDependencies.espresso, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile testDependencies.junit

    compile project(':base')

    // butterknife
    compile dependencies.butterknife
    annotationProcessor dependencies.butterknife_compiler
    // arouter
    annotationProcessor dependencies.arouter_compiler
}
